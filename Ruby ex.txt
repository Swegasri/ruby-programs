EX 1: A Good First Program

Code:
    puts "Hello World!"
    puts "Hello Again"
    puts "I like typing this."
    puts "This is fun."
    puts "Yay! Printing."
    puts "I'd much rather you 'not'."
    puts 'I "said" do not touch this.'
	
Output:
    Hello World!
    Hello Again
    I like typing this.
    This is fun.
    Yay! Printing.
    I'd much rather you 'not'.
    I "said" do not touch this.	
	
------------------------------------------------------------------------------------------------
EX 2:Comments and Pound Characters	

Code:
# A comment, this is so you can read your program later.
# Anything after the # is ignored by ruby.

    puts "I could have code like this." # and the comment after is ignored

# You can also use a comment to "disable" or comment out a piece of code:
# puts "This won't run."

    puts "This will run."
	
Output:
    I could have code like this.
    This will run.	
	
-------------------------------------------------------------------------------------------------
EX 3: Numbers and Math

Code:
    puts "I will now count my chickens:"
    puts "Hens #{25 + 30 / 6}"
    puts "Roosters #{100 - 25 * 3 % 4}"
    puts "Now I will count the eggs:"
    puts 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6
    puts "Is it true that 3 + 2 < 5 - 7?"
    puts 3 + 2 < 5 - 7
    puts "What is 3 + 2? #{3 + 2}"
    puts "What is 5 - 7? #{5 - 7}"
    puts "Oh, that's why it's false."
    puts "How about some more."
    puts "Is it greater? #{5 > -2}"
    puts "Is it greater or equal? #{5 >= -2}"
    puts "Is it less or equal? #{5 <= -2}"
	
Output:
    I will now count my chickens:
    Hens 30
    Roosters 97
    Now I will count the eggs:
    7
	Is it true that 3 + 2 < 5 - 7?
	false
	What is 3 + 2? 5
	What is 5 - 7? -2
	Oh, that's why it's false.
	How about some more.
	Is it greater? true
	Is it greater or equal? true
	Is it less or equal? false	

--------------------------------------------------------------------------------------------------
EX 4: Variables and Names

Code:
    cars = 100
	space_in_a_car = 4.0
	drivers = 30
	passengers = 90
	cars_not_driven = cars - drivers
	cars_driven = drivers
	carpool_capacity = cars_driven * space_in_a_car
	average_passengers_per_car = passengers / cars_driven

	puts "There are #{cars} cars available."
	puts "There are only #{drivers} drivers available."
	puts "There will be #{cars_not_driven} empty cars today."
	puts "We can transport #{carpool_capacity} people today."
	puts "We have #{passengers} to carpool today."
	puts "We need to put about #{average_passengers_per_car} in each car."
	
Output:
    There are 100 cars available.
	There are only 30 drivers available.
	There will be 70 empty cars today.
	We can transport 120.0 people today.
	We have 90 to carpool today.
	We need to put about 3 in each car.
	
------------------------------------------------------------------------------------------------------
EX 5: More Variables and Printing

Code:
    my_name = 'Zed A. Shaw'
	my_age = 35 # not a lie in 2009
	my_height = 74 # inches
	my_weight = 180 # lbs
	my_eyes = 'Blue'
	my_teeth = 'White'
	my_hair = 'Brown'

	puts "Let's talk about #{my_name}."
	puts "He's #{my_height} inches tall."
	puts "He's #{my_weight} pounds heavy."
	puts "Actually that's not too heavy."
	puts "He's got #{my_eyes} eyes and #{my_hair} hair."
	puts "His teeth are usually #{my_teeth} depending on the coffee."

	# this line is tricky, try to get it exactly right
	puts "If I add #{my_age}, #{my_height}, and #{my_weight} I get #{my_age + my_height + my_weight}."
	
Output:
	Let's talk about Zed A. Shaw.
	He's 74 inches tall.
	He's 180 pounds heavy.
	Actually that's not too heavy.
	He's got Blue eyes and Brown hair.
	His teeth are usually White depending on the coffee.
	If I add 35, 74, and 180 I get 289.
			
-----------------------------------------------------------------------------------------------------------
EX 6: Strings and Text

Code:
	types_of_people = 10
	x = "There are #{types_of_people} types of people."
	binary = "binary"
	do_not = "don't"
	y = "Those who know #{binary} and those who #{do_not}."

	puts x
	puts y

	puts "I said: #{x}."
	puts "I also said: '#{y}'."

	hilarious = false
	joke_evaluation = "Isn't that joke so funny?! #{hilarious}"

	puts joke_evaluation

	w = "This is the left side of..."
	e = "a string with a right side."

	puts w + e
	
	
Output:
	There are 10 types of people.
	Those who know binary and those who don't.
	I said: There are 10 types of people..
	I also said: 'Those who know binary and those who don't.'.
	Isn't that joke so funny?! false
	This is the left side of...a string with a right side.
	
-------------------------------------------------------------------------------------------------------------
EX 7: More Printing

Code:
	puts "Mary had a little lamb."
	puts "Its fleece was white as #{'snow'}."
	puts "And everywhere that Mary went."
	puts "." * 10  # what'd that do?

	end1 = "C"
	end2 = "h"
	end3 = "e"
	end4 = "e"
	end5 = "s"
	end6 = "e"
	end7 = "B"
	end8 = "u"
	end9 = "r"
	end10 = "g"
	end11 = "e"
	end12 = "r"

	# watch that print vs. puts on this line what's it do?
	print end1 + end2 + end3 + end4 + end5 + end6
	puts end7 + end8 + end9 + end10 + end11 + end12	

Output:
	Mary had a little lamb.
	Its fleece was white as snow.
	And everywhere that Mary went.
	..........
	CheeseBurger
	
---------------------------------------------------------------------------------------------------------------
EX 8: Printing, Printing

Code:
	formatter = "%{first} %{second} %{third} %{fourth}"

	puts formatter % {first: 1, second: 2, third: 3, fourth: 4}
	puts formatter % {first: "one", second: "two", third: "three", fourth: "four"}
	puts formatter % {first: true, second: false, third: true, fourth: false}
	puts formatter % {first: formatter, second: formatter, third: formatter, fourth: formatter}

	puts formatter % {
	  first: "I had this thing.",
	  second: "That you could type up right.",
	  third: "But it didn't sing.",
	  fourth: "So I said goodnight."
	}

Output:
    1 2 3 4
	one two three four
	true false true false
	%{first} %{second} %{third} %{fourth} %{first} %{second} %{third} %{fourth} %{first} %{second} %{third} %{fourth} %{first} %{second} %{third} %{fourth}
	I had this thing. That you could type up right. But it didn't sing. So I said goodnight.

----------------------------------------------------------------------------------------------------------------------
EX 9: Printing, Printing, Printing

Code:
	# Here's some new strange stuff, remember type it exactly.

	days = "Mon Tue Wed Thu Fri Sat Sun"
	months = "Jan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug"

	puts "Here are the days: #{days}"
	puts "Here are the months: #{months}"

	puts %q{
	There's something going on here.
	With this weird quote
	We'll be able to type as much as we like.
	Even 4 lines if we want, or 5, or 6.
	}

Output:
	Here are the days: Mon Tue Wed Thu Fri Sat Sun
	Here are the months: Jan
	Feb
	Mar
	Apr
	May
	Jun
	Jul
	Aug

	There's something going on here.
	With this weird quote
	We'll be able to type as much as we like.
	Even 4 lines if we want, or 5, or 6.

-----------------------------------------------------------------------------------------------------------------
EX 10: What Was That?

Code:
	tabby_cat = "\tI'm tabbed in."
	persian_cat = "I'm split\non a line."
	backslash_cat = "I'm \\ a \\ cat."

	fat_cat = """
	I'll do a list:
	\t* Cat food
	\t* Fishies
	\t* Catnip\n\t* Grass
	"""

	puts tabby_cat
	puts persian_cat
	puts backslash_cat
	puts fat_cat

Output:
			I'm tabbed in.
	I'm split
	on a line.
	I'm \ a \ cat.

	I'll do a list:
			* Cat food
			* Fishies
			* Catnip
			* Grass

------------------------------------------------------------------------------------------------
EX 11:  Asking Questions

Code:
	print "How old are you? "
	age = gets.chomp
	print "How tall are you? "
	height = gets.chomp
	print "How much do you weigh? "
	weight = gets.chomp

	puts "So, you're #{age} old, #{height} tall and #{weight} heavy."

Output:
	How old are you? 39
	How tall are you? 6'2"
	How much do you weigh? 180lbs
	So, you're 39 old, 6'2" tall and 180lbs heavy.
	
-----------------------------------------------------------------------------------------------
EX 12: Prompting People for Numbers

Code:
	print "Give me a number: "
	number = gets.chomp.to_i

	bigger = number * 100
	puts "A bigger number is #{bigger}."

	print "Give me another number: "
	another = gets.chomp
	number = another.to_i

	smaller = number / 100
	puts "A smaller number is #{smaller}."	

Output:
	Give me a number: 10
	A bigger number is 1000.
	Give me another number: 200
	A smaller number is 2.
	
-----------------------------------------------------------------------------------------------
EX 13: Parameters, Unpacking, Variables

Code:
	first, second, third = ARGV

	puts "Your first variable is: #{first}"
	puts "Your second variable is: #{second}"
	puts "Your third variable is: #{third}"	
	
Output:
	Your first variable is: first
	Your second variable is: 2nd
	Your third variable is: 3rd	

--------------------------------------------------------------------------------------------------
EX 14: Prompting and Passing

Code:
	user_name = ARGV.first # gets the first argument
	prompt = '> '

	puts "Hi #{user_name}."
	puts "I'd like to ask you a few questions."
	puts "Do you like me #{user_name}? "
	puts prompt
	likes = $stdin.gets.chomp

	puts "Where do you live #{user_name}? "
	puts prompt
	lives = $stdin.gets.chomp

	# a comma for puts is like using it twice
	puts "What kind of computer do you have? ", prompt
	computer = $stdin.gets.chomp

	puts """
	Alright, so you said #{likes} about liking me.
	You live in #{lives}.  Not sure where that is.
	And you have a #{computer} computer.  Nice.
	"""

Output:
	Hi zed.
	I'd like to ask you a few questions.
	Do you like me zed?
	>
	Yes
	Where do you live zed?
	>
	San Francisco
	What kind of computer do you have?
	>
	Tandy

	Alright, so you said Yes about liking me.
	You live in San Francisco.  Not sure where that is.
	And you have a Tandy computer.  Nice.	
	
-------------------------------------------------------------------------------------------------
EX 15: Reading Files

Code:
	filename = ARGV.first

	txt = open(filename)

	puts "Here's your file #{filename}:"
	print txt.read

	print "Type the filename again: "
	file_again = $stdin.gets.chomp

	txt_again = open(file_again)

	print txt_again.read	
	
Output:
	Here's your file ex15_sample.txt:
	This is stuff I typed into a file.
	It is really cool stuff.
	Lots and lots of fun to have in here.

	Type the filename again: ex15_sample.txt
	This is stuff I typed into a file.
	It is really cool stuff.
	Lots and lots of fun to have in here.
		
----------------------------------------------------------------------------------------------------
EX 16: Reading and Writing Files

Code:
	filename = ARGV.first

	puts "We're going to erase #{filename}"
	puts "If you don't want that, hit CTRL-C (^C)."
	puts "If you do want that, hit RETURN."

	$stdin.gets

	puts "Opening the file..."
	target = open(filename, 'w')

	puts "Truncating the file.  Goodbye!"
	target.truncate(0)

	puts "Now I'm going to ask you for three lines."

	print "line 1: "
	line1 = $stdin.gets.chomp
	print "line 2: "
	line2 = $stdin.gets.chomp
	print "line 3: "
	line3 = $stdin.gets.chomp

	puts "I'm going to write these to the file."

	target.write(line1)
	target.write("\n")
	target.write(line2)
	target.write("\n")
	target.write(line3)
	target.write("\n")

	puts "And finally, we close it."
	target.close
		
Output:
	We're going to erase test.txt
	If you don't want that, hit CTRL-C (^C).
	If you do want that, hit RETURN.

	Opening the file...
	Truncating the file.  Goodbye!
	Now I'm going to ask you for three lines.
	line 1: I am the first line.
	line 2: I am the second line.
	line 3: I am the third line.
	I'm going to write these to the file.
	And finally, we close it.
			
----------------------------------------------------------------------------------------------------
EX 17: More Files
   
Code:
	from_file, to_file = ARGV

	puts "Copying from #{from_file} to #{to_file}"

	# we could do these two on one line, how?
	in_file = open(from_file)
	indata = in_file.read

	puts "The input file is #{indata.length} bytes long"

	puts "Does the output file exist? #{File.exist?(to_file)}"
	puts "Ready, hit RETURN to continue, CTRL-C to abort."
	$stdin.gets

	out_file = open(to_file, 'w')
	out_file.write(indata)

	puts "Alright, all done."

	out_file.close
	in_file.close
	
Output:
	$ echo "This is a test file." > test.txt
	$ cat test.txt
	This is a test file.
	$ ruby ex17.rb test.txt new_file.txt
	Copying from test.txt to new_file.txt
	The input file is 21 bytes long
	Does the output file exist? false
	Ready, hit RETURN to continue, CTRL-C to abort.

	Alright, all done.	
	
------------------------------------------------------------------------------------------------
EX 18: Names, Variables, Code, Functions

Code:
	# this one is like your scripts with ARGV
	def print_two(*args)
	  arg1, arg2 = args
	  puts "arg1: #{arg1}, arg2: #{arg2}"
	end

	# ok, that *args is actually pointless, we can just do this
	def print_two_again(arg1, arg2)
	  puts "arg1: #{arg1}, arg2: #{arg2}"
	end

	# this just takes one argument
	def print_one(arg1)
	  puts "arg1: #{arg1}"
	end

	# this one takes no arguments
	def print_none()
	  puts "I got nothin'."
	end


	print_two("Zed","Shaw")
	print_two_again("Zed","Shaw")
	print_one("First!")
	print_none()	
	
Output:
	arg1: Zed, arg2: Shaw
	arg1: Zed, arg2: Shaw
	arg1: First!
	I got nothin'.	
	
------------------------------------------------------------------------------------------------------------------------------
EX 19: Functions and Variables

Code:
	def cheese_and_crackers(cheese_count, boxes_of_crackers)
	  puts "You have #{cheese_count} cheeses!"
	  puts "You have #{boxes_of_crackers} boxes of crackers!"
	  puts "Man that's enough for a party!"
	  puts "Get a blanket.\n"
	end


	puts "We can just give the function numbers directly:"
	cheese_and_crackers(20, 30)


	puts "OR, we can use variables from our script:"
	amount_of_cheese = 10
	amount_of_crackers = 50

	cheese_and_crackers(amount_of_cheese, amount_of_crackers)


	puts "We can even do math inside too:"
	cheese_and_crackers(10 + 20, 5 + 6)


	puts "And we can combine the two, variables and math:"
	cheese_and_crackers(amount_of_cheese + 100, amount_of_crackers + 1000)
		
Output:
	We can just give the function numbers directly:
	You have 20 cheeses!
	You have 30 boxes of crackers!
	Man that's enough for a party!
	Get a blanket.
	OR, we can use variables from our script:
	You have 10 cheeses!
	You have 50 boxes of crackers!
	Man that's enough for a party!
	Get a blanket.
	We can even do math inside too:
	You have 30 cheeses!
	You have 11 boxes of crackers!
	Man that's enough for a party!
	Get a blanket.
	And we can combine the two, variables and math:
	You have 110 cheeses!
	You have 1050 boxes of crackers!
	Man that's enough for a party!
	Get a blanket.		
	
-----------------------------------------------------------------------------------------------------------
Ex 20:  Functions and Files

Code:
	input_file = ARGV.first

	def print_all(f)
	  puts f.read
	end

	def rewind(f)
	  f.seek(0)
	end

	def print_a_line(line_count, f)
	  puts "#{line_count}, #{f.gets.chomp}"
	end

	current_file = open(input_file)

	puts "First let's print the whole file:\n"

	print_all(current_file)

	puts "Now let's rewind, kind of like a tape."

	rewind(current_file)

	puts "Let's print three lines:"

	current_line = 1
	print_a_line(current_line, current_file)

	current_line = current_line + 1
	print_a_line(current_line, current_file)

	current_line = current_line + 1
	print_a_line(current_line, current_file)
	
Output:
	First let's print the whole file:
	This is line 1
	This is line 2
	This is line 3
	Now let's rewind, kind of like a tape.
	Let's print three lines:
	1, This is line 1
	2, This is line 2
	3, This is line 3	
	
---------------------------------------------------------------------------------------------------------------
EX 21: Functions Can Return Something

Code:
	def add(a, b)
	  puts "ADDING #{a} + #{b}"
	  return a + b
	end

	def subtract(a, b)
	  puts "SUBTRACTING #{a} - #{b}"
	  return a - b
	end

	def multiply(a, b)
	  puts "MULTIPLYING #{a} * #{b}"
	  return a * b
	end

	def divide(a, b)
	  puts "DIVIDING #{a} / #{b}"
	  return a / b
	end


	puts "Let's do some math with just functions!"

	age = add(30, 5)
	height = subtract(78, 4)
	weight = multiply(90, 2)
	iq = divide(100, 2)

	puts "Age: #{age}, Height: #{height}, Weight: #{weight}, IQ: #{iq}"


	# A puzzle for the extra credit, type it in anyway.
	puts "Here is a puzzle."

	what = add(age, subtract(height, multiply(weight, divide(iq, 2))))

	puts "That becomes: #{what}. Can you do it by hand?"

Output:
	Let's do some math with just functions!
	ADDING 30 + 5
	SUBTRACTING 78 - 4
	MULTIPLYING 90 * 2
	DIVIDING 100 / 2
	Age: 35, Height: 74, Weight: 180, IQ: 50
	Here is a puzzle.
	DIVIDING 50 / 2
	MULTIPLYING 180 * 25
	SUBTRACTING 74 - 4500
	ADDING 35 + -4426
	That becomes: -4391. Can you do it by hand?		
	
------------------------------------------------------------------------------------------------------------------
Ex 24: 	More Practice

Code:
	puts "Let's practice everything."
	puts 'You\'d need to know \'bout escapes with \\ that do \n newlines and \t tabs.'

	# the <<END is a "heredoc". See the Student Questions.
	poem = <<END
	\tThe lovely world
	with logic so firmly planted
	cannot discern \n the needs of love
	nor comprehend passion from intuition
	and requires an explanation
	\n\t\twhere there is none.
	END

	puts "--------------"
	puts poem
	puts "--------------"


	five = 10 - 2 + 3 - 6
	puts "This should be five: #{five}"

	def secret_formula(started)
	  jelly_beans = started * 500
	  jars = jelly_beans / 1000
	  crates = jars / 100
	  return jelly_beans, jars, crates
	end


	start_point = 10000
	beans, jars, crates = secret_formula(start_point)

	puts "With a starting point of: #{start_point}"
	puts "We'd have #{beans} beans, #{jars} jars, and #{crates} crates."

	start_point = start_point / 10
	puts "We can also do that this way:"
	puts "We'd have %s beans, %d jars, and %d crates." % secret_formula(start_point)

Output:
	Let's practice everything.
	You'd need to know 'bout escapes with \ that do \n newlines and \t tabs.
	--------------
	 The lovely world
	with logic so firmly planted
	cannot discern
	 the needs of love
	nor comprehend passion from intuition
	and requires an explanation

					where there is none.
	--------------
	This should be five: 5
	With a starting point of: 10000
	We'd have 5000000 beans, 5000 jars, and 50 crates.
	We can also do that this way:
	We'd have 500000 beans, 500 jars, and 5 crates.

---------------------------------------------------------------------------------------------------------------------------------
EX 25: Even More Practice

Code:
	module Ex25

	  # This function will break up words for us.
	  def Ex25.break_words(stuff)
		words = stuff.split(' ')
		return words
	  end

	  # Sorts the words.
	  def Ex25.sort_words(words)
		return words.sort
	  end

	  # Prints the first word after shifting it off.
	  def Ex25.print_first_word(words)
		word = words.shift
		puts word
	  end

	  # Prints the last word after popping it off.
	  def Ex25.print_last_word(words)
		word = words.pop
		puts word
	  end

	  # Takes in a full sentence and returns the sorted words.
	  def Ex25.sort_sentence(sentence)
		words = Ex25.break_words(sentence)
		return Ex25.sort_words(words)
	  end

	  # Prints the first and last words of the sentence.
	  def Ex25.print_first_and_last(sentence)
		words = Ex25.break_words(sentence)
		Ex25.print_first_word(words)
		Ex25.print_last_word(words)
	  end

	  # Sorts the words then prints the first and last one.
	  def Ex25.print_first_and_last_sorted(sentence)
		words = Ex25.sort_sentence(sentence)
		Ex25.print_first_word(words)
		Ex25.print_last_word(words)
	  end

	end
	
Output:
--------------------------------------------------------------------------------------------------------
EX 29: What If

Code:
	people = 20
	cats = 30
	dogs = 15


	if people < cats
	  puts "Too many cats! The world is doomed!"
	end

	if people > cats
	  puts "Not many cats! The world is saved!"
	end

	if people < dogs
	  puts "The world is drooled on!"
	end

	if people > dogs
	  puts "The world is dry!"
	end


	dogs += 5

	if people >= dogs
	  puts "People are greater than or equal to dogs."
	end

	if people <= dogs
	  puts "People are less than or equal to dogs."
	end


	if people == dogs
	  puts "People are dogs."
	end	
	
Output:
	Too many cats! The world is doomed!
	The world is dry!
	People are greater than or equal to dogs.
	People are less than or equal to dogs.
	People are dogs.	
	
-------------------------------------------------------------------------------------------------------------------------------
EX 30: Else and If

Code:
	people = 30
	cars = 40
	trucks = 15


	if cars > people
	  puts "We should take the cars."
	elsif cars < people
	  puts "We should not take the cars."
	else
	  puts "We can't decide."
	end

	if trucks > cars
	  puts "That's too many trucks."
	elsif trucks < cars
	  puts "Maybe we could take the trucks."
	else
	  puts "We still can't decide."
	end

	if people > trucks
	  puts "Alright, let's just take the trucks."
	else
	  puts "Fine, let's stay home then."
	end

Output:
	We should take the cars.
	Maybe we could take the trucks.
	Alright, let's just take the trucks.

--------------------------------------------------------------------------------------------------------	
EX 31: Making Decisions

Code:
	puts "You enter a dark room with two doors.  Do you go through door #1 or door #2?"

	print "> "
	door = $stdin.gets.chomp

	if door == "1"
	  puts "There's a giant bear here eating a cheese cake.  What do you do?"
	  puts "1. Take the cake."
	  puts "2. Scream at the bear."

	  print "> "
	  bear = $stdin.gets.chomp

	  if bear == "1"
		puts "The bear eats your face off.  Good job!"
	  elsif bear == "2"
		puts "The bear eats your legs off.  Good job!"
	  else
		puts "Well, doing %s is probably better.  Bear runs away." % bear
	  end

	elsif door == "2"
	  puts "You stare into the endless abyss at Cthulhu's retina."
	  puts "1. Blueberries."
	  puts "2. Yellow jacket clothespins."
	  puts "3. Understanding revolvers yelling melodies."

	  print "> "
	  insanity = $stdin.gets.chomp

	  if insanity == "1" || insanity == "2"
		puts "Your body survives powered by a mind of jello.  Good job!"
	  else
		puts "The insanity rots your eyes into a pool of muck.  Good job!"
	  end

	else
	  puts "You stumble around and fall on a knife and die.  Good job!"
	end

Output:
	You enter a dark room with two doors.  Do you go through door #1 or door #2?
	> 1
	There's a giant bear here eating a cheese cake.  What do you do?
	1. Take the cake.
	2. Scream at the bear.
	> 2
	The bear eats your legs off.  Good job!

-----------------------------------------------------------------------------------------------------------
EX 32: Loops and Arrays

Code:
	the_count = [1, 2, 3, 4, 5]
	fruits = ['apples', 'oranges', 'pears', 'apricots']
	change = [1, 'pennies', 2, 'dimes', 3, 'quarters']

	# this first kind of for-loop goes through a list
	# in a more traditional style found in other languages
	for number in the_count
	  puts "This is count #{number}"
	end

	# same as above, but in a more Ruby style
	# this and the next one are the preferred 
	# way Ruby for-loops are written
	fruits.each do |fruit|
	  puts "A fruit of type: #{fruit}"
	end

	# also we can go through mixed lists too
	# note this is yet another style, exactly like above
	# but a different syntax (way to write it).
	change.each {|i| puts "I got #{i}" }

	# we can also build lists, first start with an empty one
	elements = []

	# then use the range operator to do 0 to 5 counts
	(0..5).each do |i|
	  puts "adding #{i} to the list."
	  # pushes the i variable on the *end* of the list
	  elements.push(i)
	end

	# now we can print them out too
	elements.each {|i| puts "Element was: #{i}" }

Output:
	This is count 1
	This is count 2
	This is count 3
	This is count 4
	This is count 5
	A fruit of type: apples
	A fruit of type: oranges
	A fruit of type: pears
	A fruit of type: apricots
	I got 1
	I got pennies
	I got 2
	I got dimes
	I got 3
	I got quarters
	adding 0 to the list.
	adding 1 to the list.
	adding 2 to the list.
	adding 3 to the list.
	adding 4 to the list.
	adding 5 to the list.
	Element was: 0
	Element was: 1
	Element was: 2
	Element was: 3
	Element was: 4
	Element was: 5

---------------------------------------------------------------------------------------------------------------
EX 33: While Loops

Code:
	i = 0
	numbers = []

	while i < 6
	  puts "At the top i is #{i}"
	  numbers.push(i)

	  i += 1
	  puts "Numbers now: ", numbers
	  puts "At the bottom i is #{i}"
	end

	puts "The numbers: "

	# remember you can write this 2 other ways?
	numbers.each {|num| puts num }

Output:
	At the top i is 0
	Numbers now:
	0
	At the bottom i is 1
	At the top i is 1
	Numbers now:
	0
	1
	At the bottom i is 2
	At the top i is 2
	Numbers now:
	0
	1
	2
	At the bottom i is 3
	At the top i is 3
	Numbers now:
	0
	1
	2
	3
	At the bottom i is 4
	At the top i is 4
	Numbers now:
	0
	1
	2
	3
	4
	At the bottom i is 5
	At the top i is 5
	Numbers now:
	0
	1
	2
	3
	4
	5
	At the bottom i is 6
	The numbers:
	0
	1
	2
	3
	4
	5
	
------------------------------------------------------------------------------------------------------------------
EX 35:  Branches and Functions

Code:
	def gold_room
	  puts "This room is full of gold.  How much do you take?"

	  print "> "
	  choice = $stdin.gets.chomp

	  # this line has a bug, so fix it
	  if choice.include?("0") || choice.include?("1")
		how_much = choice.to_i
	  else
		dead("Man, learn to type a number.")
	  end

	  if how_much < 50
		puts "Nice, you're not greedy, you win!"
		exit(0)
	  else
		dead("You greedy bastard!")
	  end
	end


	def bear_room
	  puts "There is a bear here."
	  puts "The bear has a bunch of honey."
	  puts "The fat bear is in front of another door."
	  puts "How are you going to move the bear?"
	  bear_moved = false

	  while true
		print "> "
		choice = $stdin.gets.chomp

		if choice == "take honey"
		  dead("The bear looks at you then slaps your face off.")
		elsif choice == "taunt bear" && !bear_moved
		  puts "The bear has moved from the door. You can go through it now."
		  bear_moved = true
		elsif choice == "taunt bear" && bear_moved
		  dead("The bear gets pissed off and chews your leg off.")
		elsif choice == "open door" && bear_moved
		  gold_room
		else
		  puts "I got no idea what that means."
		end
	  end
	end


	def cthulhu_room
	  puts "Here you see the great evil Cthulhu."
	  puts "He, it, whatever stares at you and you go insane."
	  puts "Do you flee for your life or eat your head?"

	  print "> "
	  choice = $stdin.gets.chomp

	  if choice.include? "flee"
		start
	  elsif choice.include? "head"
		dead("Well that was tasty!")
	  else
		cthulhu_room
	  end
	end


	def dead(why)
	  puts why, "Good job!"
	  exit(0)
	end

	def start
	  puts "You are in a dark room."
	  puts "There is a door to your right and left."
	  puts "Which one do you take?"

	  print "> "
	  choice = $stdin.gets.chomp

	  if choice == "left"
		bear_room
	  elsif choice == "right"
		cthulhu_room
	  else
		dead("You stumble around the room until you starve.")
	  end
	end

	start

Output:
	You are in a dark room.
	There is a door to your right and left.
	Which one do you take?
	> right
	Here you see the great evil Cthulhu.
	He, it, whatever stares at you and you go insane.
	Do you flee for your life or eat your head?
	> cry
	Here you see the great evil Cthulhu.
	He, it, whatever stares at you and you go insane.
	Do you flee for your life or eat your head?
	> flee
	You are in a dark room.
	There is a door to your right and left.
	Which one do you take?
	> left
	There is a bear here.
	The bear has a bunch of honey.
	The fat bear is in front of another door.
	How are you going to move the bear?
	> take honey
	The bear looks at you then slaps your face off.
	Good job!
	
---------------------------------------------------------------------------------------------------------------------
EX 38: Doing Things to Arrays

Code:
	ten_things = "Apples Oranges Crows Telephone Light Sugar"

	puts "Wait there are not 10 things in that list. Let's fix that."

	stuff = ten_things.split(' ')
	more_stuff = ["Day", "Night", "Song", "Frisbee", "Corn", "Banana", "Girl", "Boy"]

	# using math to make sure there's 10 items

	while stuff.length != 10
	  next_one = more_stuff.pop
	  puts "Adding: #{next_one}"
	  stuff.push(next_one)
	  puts "There are #{stuff.length} items now."
	end

	puts "There we go: #{stuff}"

	puts "Let's do some things with stuff."

	puts stuff[1]
	puts stuff[-1] # whoa! fancy
	puts stuff.pop()
	puts stuff.join(' ')
	puts stuff[3..5].join("#")	
	
Output:
	Wait there are not 10 things in that list. Let's fix that.
	Adding: Boy
	There are 7 items now.
	Adding: Girl
	There are 8 items now.
	Adding: Banana
	There are 9 items now.
	Adding: Corn
	There are 10 items now.
	There we go: ["Apples", "Oranges", "Crows", "Telephone", "Light", "Sugar", "Boy", "Girl", "Banana", "Corn"]
	Let's do some things with stuff.
	Oranges
	Corn
	Corn
	Apples Oranges Crows Telephone Light Sugar Boy Girl Banana
	Telephone#Light#Sugar	
	
----------------------------------------------------------------------------------------------------------------------------------------
EX 39:Hashes, Oh Lovely Hashes

Code:
	# create a mapping of state to abbreviation
	states = {
	  'Oregon' => 'OR',
	  'Florida' => 'FL',
	  'California' => 'CA',
	  'New York' => 'NY',
	  'Michigan' => 'MI'
	}

	# create a basic set of states and some cities in them
	cities = {
	  'CA' => 'San Francisco',
	  'MI' => 'Detroit',
	  'FL' => 'Jacksonville'
	}

	# add some more cities
	cities['NY'] = 'New York'
	cities['OR'] = 'Portland'

	# puts out some cities
	puts '-' * 10
	puts "NY State has: #{cities['NY']}"
	puts "OR State has: #{cities['OR']}"

	# puts some states
	puts '-' * 10
	puts "Michigan's abbreviation is: #{states['Michigan']}"
	puts "Florida's abbreviation is: #{states['Florida']}"

	# do it by using the state then cities dict
	puts '-' * 10
	puts "Michigan has: #{cities[states['Michigan']]}"
	puts "Florida has: #{cities[states['Florida']]}"

	# puts every state abbreviation
	puts '-' * 10
	states.each do |state, abbrev|
	  puts "#{state} is abbreviated #{abbrev}"
	end

	# puts every city in state
	puts '-' * 10
	cities.each do |abbrev, city|
	  puts "#{abbrev} has the city #{city}"
	end

	# now do both at the same time
	puts '-' * 10
	states.each do |state, abbrev|
	  city = cities[abbrev]
	  puts "#{state} is abbreviated #{abbrev} and has city #{city}"
	end

	puts '-' * 10
	# by default ruby says "nil" when something isn't in there
	state = states['Texas']

	if !state
	  puts "Sorry, no Texas."
	end

	# default values using ||= with the nil result
	city = cities['TX']
	city ||= 'Does Not Exist'
	puts "The city for the state 'TX' is: #{city}"

Output:
	----------
	NY State has: New York
	OR State has: Portland
	----------
	Michigan's abbreviation is: MI
	Florida's abbreviation is: FL
	----------
	Michigan has: Detroit
	Florida has: Jacksonville
	----------
	Oregon is abbreviated OR
	Florida is abbreviated FL
	California is abbreviated CA
	New York is abbreviated NY
	Michigan is abbreviated MI
	----------
	CA has the city San Francisco
	MI has the city Detroit
	FL has the city Jacksonville
	NY has the city New York
	OR has the city Portland
	----------
	Oregon is abbreviated OR and has city Portland
	Florida is abbreviated FL and has city Jacksonville
	California is abbreviated CA and has city San Francisco
	New York is abbreviated NY and has city New York
	Michigan is abbreviated MI and has city Detroit
	----------
	Sorry, no Texas.
	The city for the state 'TX' is: Does Not Exist

-----------------------------------------------------------------------------------------------------------------------
EX 40: Modules, Classes, and Objects

Code:
	class Song

	  def initialize(lyrics)
		@lyrics = lyrics
	  end

	  def sing_me_a_song()
		@lyrics.each {|line| puts line }
	  end
	end

	happy_bday = Song.new(["Happy birthday to you",
			   "I don't want to get sued",
			   "So I'll stop right there"])

	bulls_on_parade = Song.new(["They rally around tha family",
				"With pockets full of shells"])

	happy_bday.sing_me_a_song()

	bulls_on_parade.sing_me_a_song()
	
Output:
	Happy birthday to you
	I don't want to get sued
	So I'll stop right there
	They rally around tha family
	With pockets full of shells	
	
--------------------------------------------------------------------------------------------------------------------------------------	